#include "StartGUI.h"
#include <GLFW/glfw3.h>

// DEBUG
#include <math.h>

extern GLFWwindow* window;
extern std::string exe_dir;

glm::vec3 cameraPos = glm::vec3(0.0f, 0.0f, 3.0f);
glm::vec3 cameraFront = glm::vec3(1.0, 0.0f, -1.0f);
glm::vec3 cameraUp = glm::vec3(0.0f, 1.0f, 0.0f);

float lastX, lastY;
float yaw, pitch;
float fov;

bool firstMouse = true;

void window_focus_callback(GLFWwindow* window, int focused)
{
	if (!focused)
	{
		firstMouse = false;
	}
}

void mouse_callback(GLFWwindow *window, double xpos, double ypos)
{
	if (firstMouse)
	{
		lastX = xpos;
		lastY = ypos;
		firstMouse = false;
	}

	float xoffset = xpos - lastX;
	float yoffset = ypos - lastY;
	lastX = xpos;
	lastY = ypos;

	const float sensitivity = 0.05f;
	xoffset *= sensitivity;
	yoffset *= sensitivity;

	yaw += xoffset;
	pitch -= yoffset;

	if (pitch > 89.0f) pitch = 89.0f;
	if (pitch < -89.0f) pitch = -89.0f;

	glm::vec3 direction;
	direction.x = cos(glm::radians(yaw)) * cos(glm::radians(pitch));
	direction.y = sin(glm::radians(pitch));
	direction.z = sin(glm::radians(yaw)) * cos(glm::radians(pitch));
	cameraFront = glm::normalize(direction);
}

void scroll_callback(GLFWwindow* window, double xoffset, double yoffset)
{
	fov -= (float)yoffset;
	if (fov < 1.0f) fov = 1.0f;
	if (fov > 45.0f) fov = 45.0f;
}

StartGUI::StartGUI()
{
	// Set the cursor to be disabled
	glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);
	glfwSetCursorPosCallback(window, mouse_callback);
	glfwSetScrollCallback(window, scroll_callback);

	int success;
	char infoLog[512];

	const std::string resource_root = exe_dir
		+ "resources/client/StartMenu/";
	const std::string vert_path = resource_root + "vertex_shader.glsl";
	const std::string frag_path = resource_root + "fragment_shader.glsl";

	default_shader = new Shader(vert_path.c_str(), frag_path.c_str());

	// Vertex Buffer Object
	glGenVertexArrays(1, &VAO);
	glGenBuffers(1, &VBO);
	glGenBuffers(1, &EBO);

	// Bind to the VAO we created and customize it
	glBindVertexArray(VAO);
	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices),
			vertices, GL_STATIC_DRAW);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices),
			indices, GL_STATIC_DRAW);
	// Describe how our vertex buffer is packed
	// 	Position Packing:
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float),
			(void*)0);
	glEnableVertexAttribArray(0);
	//	Texture Packing:
	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float),
			(void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);

	// TEXTURE TEST:
	// 1. JPG to byte array
	std::string img_path = resource_root + "container.jpg";
	int width, height, nrChannels;
	unsigned char *data = stbi_load(img_path.c_str(), &width, &height,
			&nrChannels, 0);

	// 2. Byte array to buffer
	glGenTextures(1, &texture);
	glBindTexture(GL_TEXTURE_2D, texture);
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB,
			GL_UNSIGNED_BYTE, data);
	glGenerateMipmap(GL_TEXTURE_2D);

	// 3. Free byte array
	stbi_image_free(data);

	img_path = resource_root + "awesomeface.png";
	stbi_set_flip_vertically_on_load(true);
	data = stbi_load(img_path.c_str(), &width, &height, &nrChannels, 0);

	glGenTextures(1, &texture_2);
	glBindTexture(GL_TEXTURE_2D, texture_2);
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGBA,
			GL_UNSIGNED_BYTE, data);
	glGenerateMipmap(GL_TEXTURE_2D);
	stbi_image_free(data);

	default_shader->use();
	default_shader->set_int("texture1", 0);
	default_shader->set_int("texture2", 1);

	// Enable Z-Buffer Test
	glEnable(GL_DEPTH_TEST);
}

void StartGUI::draw()
{
	glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	// Set the shader program and start customizing it
	default_shader->use();

	glm::mat4 view = glm::mat4(1.0f);
	const float radius = 10.0f;
	view = glm::lookAt(cameraPos, cameraPos + cameraFront, cameraUp);
	glm::mat4 projection;
	projection = glm::perspective(glm::radians(45.0f), 800.0f / 600.0f,
			0.1f, 100.0f);
	default_shader->set_mat4("view", view);
	default_shader->set_mat4("projection", projection);
	
	// Binding texture
	// Set the texture location we want to bind to
	glActiveTexture(GL_TEXTURE0);
	// Bind to that location
	glBindTexture(GL_TEXTURE_2D, texture);
	glActiveTexture(GL_TEXTURE1);
	glBindTexture(GL_TEXTURE_2D, texture_2);

	glBindVertexArray(VAO);
	for (unsigned int i = 0; i < 10; ++i) {
		glm::mat4 model = glm::mat4(1.0f);
		model = glm::translate(model, cubePositions[i]);
		float angle = 20.0f * i;
		model = glm::rotate(model, glm::radians(angle),
				glm::vec3(1.0f, 0.3f, 0.5f));
		default_shader->set_mat4("model", model);

		glDrawArrays(GL_TRIANGLES, 0, 36);
	}

	glfwSwapBuffers(window);
}

int StartGUI::update()
{
	float currentFrame = glfwGetTime();
	deltaTime = currentFrame - lastFrame;
	lastFrame = currentFrame;
	float cameraSpeed = 6.0f * deltaTime;

	UI_STATE state = U_OK;

	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
		glfwSetWindowShouldClose(window, true);
	if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)
		cameraPos += cameraSpeed * cameraFront;
	if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)
		cameraPos -= cameraSpeed * cameraFront;
	if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)
		cameraPos -= glm::cross(cameraFront, cameraUp) * cameraSpeed;
	if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)
		cameraPos += glm::cross(cameraFront, cameraUp) * cameraSpeed;
	if (glfwGetKey(window, GLFW_KEY_SPACE) == GLFW_PRESS)
		cameraPos += cameraSpeed * cameraUp;
	if (glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS)
		cameraPos -= cameraSpeed * cameraUp;

	draw();
	glfwPollEvents();

	if (glfwWindowShouldClose(window))
		state = U_TERMINATE;

	return state;
}

void StartGUI::init_menu()
{

}

std::string *StartGUI::get_time_str()
{
	return nullptr;
}

void StartGUI::update_selected_row()
{

}

void StartGUI::switch_selected_row(int row_change)
{

}

void StartGUI::switch_selected_choice(int choice_change)
{

}

int StartGUI::handle_enter()
{
	return 0;
}

StartGUI::~StartGUI()
{
	glDeleteVertexArrays(1, &VAO);
	glDeleteBuffers(1, &VBO);

	delete default_shader;
}
